****
**** Reverse AD Ex1
****
Trying example: ex1
  e = ln(sin(x1))
  f_unopt = (ln o (sin o pi_1/1))
  f = (ln o sin)
  Differentiating:
  f x1 =
    ln(sin(x1))
  f' x1 =
    (pow(-1)(sin(x1)) *) :o: (cos(x1) *)
  f^ x1 =
    (cos(x1) *) :o: (pow(-1)(sin(x1)) *)
  f^ x1 1 =
    (cos(x1) * pow(-1)(sin(x1)))

Trying example: ex2
  e = (x1*x2)
  f_unopt = ((*) o ((pi_1/2 x pi_2/2) o dup))
  f = (*)
  Differentiating:
  f (x1,x2) =
    (x1 * x2)
  f' (x1,x2) =
    (+) :o: ((* x2) :+: (x1 *))
  f^ (x1,x2) =
    ((* x2) :+: (x1 *)) :o: dup
  f^ (x1,x2) 1 =
    (x2,x1)

Trying example: ex3
  e = ((ln(x1)+(x1*x2))+~(sin(x2)))
  f_unopt = ((+) o ((((+) o (((ln o pi_1/2) x ((*) o ((pi_1/2 x pi_2/2) o dup))) o dup)) x (~ o (sin o pi_2/2))) o dup))
  f = ((+) o ((((+) o (((ln o pi_1/2) x (*)) o dup)) x (~ o (sin o pi_2/2))) o dup))
  Differentiating:
  f (x1,x2) =
    ((ln(x1) + (x1 * x2)) + ~(sin(x2)))
  f' (x1,x2) =
    (+) :o: ((+) :o: ((pow(-1)(x1) *) :o: pi_1/2 :+: (+) :o: ((* x2) :+: (x1 *))) :o: dup :+: neg :o: (cos(x2) *) :o: pi_2/2) :o: dup
  f^ (x1,x2) =
    (+) :o: ((+) :o: ((id :+: zero) :o: dup :o: (pow(-1)(x1) *) :+: ((* x2) :+: (x1 *)) :o: dup) :o: dup :+: (zero :+: id) :o: dup :o: (cos(x2) *) :o: neg) :o: dup
  f^ (x1,x2) 1 =
    let v1 = pow(-1)(x1)
    let v2 = (cos(x2) * -1)
    in ((v1 + x2),(x1 + v2))

Trying example: ex4
  e = (((ln(x1)+(x1*x2))+~(sin(x2)))*(x1+x2))
  f_unopt = ((*) o ((((+) o ((((+) o (((ln o pi_1/2) x ((*) o ((pi_1/2 x pi_2/2) o dup))) o dup)) x (~ o (sin o pi_2/2))) o dup)) x ((+) o ((pi_1/2 x pi_2/2) o dup))) o dup))
  f = ((*) o ((((+) o ((((+) o (((ln o pi_1/2) x (*)) o dup)) x (~ o (sin o pi_2/2))) o dup)) x (+)) o dup))
  Differentiating:
  f (x1,x2) =
    let v3 = ((ln(x1) + (x1 * x2)) + ~(sin(x2)))
    let v4 = (x1 + x2)
    in (v3 * v4)
  f' (x1,x2) =
    let v3 = ((ln(x1) + (x1 * x2)) + ~(sin(x2)))
    let v4 = (x1 + x2)
    in (+) :o: ((* v4) :+: (v3 *)) :o: ((+) :o: ((+) :o: ((pow(-1)(x1) *) :o: pi_1/2 :+: (+) :o: ((* x2) :+: (x1 *))) :o: dup :+: neg :o: (cos(x2) *) :o: pi_2/2) :o: dup :+: (+)) :o: dup
  f^ (x1,x2) =
    let v3 = ((ln(x1) + (x1 * x2)) + ~(sin(x2)))
    let v4 = (x1 + x2)
    in (+) :o: ((+) :o: ((+) :o: ((id :+: zero) :o: dup :o: (pow(-1)(x1) *) :+: ((* x2) :+: (x1 *)) :o: dup) :o: dup :+: (zero :+: id) :o: dup :o: (cos(x2) *) :o: neg) :o: dup :+: dup) :o: ((* v4) :+: (v3 *)) :o: dup
  f^ (x1,x2) 1 =
    let v3 = ((ln(x1) + (x1 * x2)) + ~(sin(x2)))
    let v4 = (x1 + x2)
    let v6 = (pow(-1)(x1) * v4)
    let v7 = (cos(x2) * ~(v4))
    in (((v6 + (v4 * x2)) + v3),(((x1 * v4) + v7) + v3))

Trying example: ex5
  e = ln((x1*cos(x2)))
  f_unopt = (ln o ((*) o ((pi_1/2 x (cos o pi_2/2)) o dup)))
  f = (ln o ((*) o ((pi_1/2 x (cos o pi_2/2)) o dup)))
  Differentiating:
  f (x1,x2) =
    let v9 = cos(x2)
    in ln((x1 * v9))
  f' (x1,x2) =
    let v9 = cos(x2)
    in (pow(-1)((x1 * v9)) *) :o: (+) :o: ((* v9) :+: (x1 *)) :o: (pi_1/2 :+: (~(sin(x2)) *) :o: pi_2/2) :o: dup
  f^ (x1,x2) =
    let v9 = cos(x2)
    in (+) :o: ((id :+: zero) :o: dup :+: (zero :+: id) :o: dup :o: (~(sin(x2)) *)) :o: ((* v9) :+: (x1 *)) :o: dup :o: (pow(-1)((x1 * v9)) *)
  f^ (x1,x2) 1 =
    let v9 = cos(x2)
    let v10 = pow(-1)((x1 * v9))
    let v11 = (v10 * v9)
    let v12 = (~(sin(x2)) * (x1 * v10))
    in (v11,v12)

Trying example: ex6
  e = (x2*~((if x1 then (x2*x1) else sin(x2))))
  f_unopt = ((*) o ((pi_2/2 x (~ o (if pi_1/2 then ((*) o ((pi_2/2 x pi_1/2) o dup)) else (sin o pi_2/2)))) o dup))
  f = ((*) o ((pi_2/2 x (~ o (if pi_1/2 then ((*) o ((pi_2/2 x pi_1/2) o dup)) else (sin o pi_2/2)))) o dup))
  Differentiating:
  f (x1,x2) =
    let v13 = ~((if x1 then
  (x2 * x1)
else
  sin(x2)))
    in (x2 * v13)
  f' (x1,x2) =
    let v13 = ~((if x1 then
  (x2 * x1)
else
  sin(x2)))
    in (+) :o: ((* v13) :+: (x2 *)) :o: (pi_2/2 :+: neg :o: (if x1 then   (+) :o: ((* x1) :+: (x2 *)) :o: (pi_2/2 :+: pi_1/2) :o: dup else   (cos(x2) *) :o: pi_2/2)) :o: dup
  f^ (x1,x2) =
    let v13 = ~((if x1 then
  (x2 * x1)
else
  sin(x2)))
    in (+) :o: ((zero :+: id) :o: dup :+: (if x1 then   (+) :o: ((zero :+: id) :o: dup :+: (id :+: zero) :o: dup) :o: ((* x1) :+: (x2 *)) :o: dup else   (zero :+: id) :o: dup :o: (cos(x2) *)) :o: neg) :o: ((* v13) :+: (x2 *)) :o: dup
  f^ (x1,x2) 1 =
    let v13 = ~((if x1 then
  (x2 * x1)
else
  sin(x2)))
    in ((Z,v13) + (if x1 then
  let v15 = ~(x2)
  let v16 = (v15 * x1)
  let v17 = (x2 * v15)
  in (v17,v16)
else
  let v18 = (cos(x2) * ~(x2))
  in (Z,v18)))

