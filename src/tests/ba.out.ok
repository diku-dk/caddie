****
**** BA (Bundle Adjustment)
****

Trying example: norm
  norm = ((pow(0.5) o (dot)) o dup)
  Differentiating:
  f x =
    pow(0.5)((x dot x))
  f' x =
    ((0.5 * pow(~0.5)((x dot x))) *) :o: (+) :o: ((dot x) :+: (x dot)) :o: dup
  f' x dx1 =
    ((0.5 * pow(~0.5)((x dot x))) * ((dx1 dot x) + (x dot dx1)))


Trying example: norm
  norm = ((pow(0.5) o (dot)) o dup)
  Differentiating:
  f (3.0,4.0) =
    5.0
  f' (3.0,4.0) =
    (0.1 *) :o: (+) :o: ((dot (3.0,4.0)) :+: ((3.0,4.0) dot)) :o: dup
  f' (3.0,4.0) (1.0,0.0) =
    0.6


Trying example: nrm
  nrm = (((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup)
  Differentiating:
  f x =
    let v1 = pow(~1.0)(pow(0.5)((x dot x)))
    in (v1 . x)
  f' x =
    let v1 = pow(~1.0)(pow(0.5)((x dot x)))
    in (+) :o: ((. x) :+: (v1 .)) :o: (((~1.0 * pow(~2.0)(pow(0.5)((x dot x)))) *) :o: ((0.5 * pow(~0.5)((x dot x))) *) :o: (+) :o: ((dot x) :+: (x dot)) :o: dup :+: id) :o: dup
  f' x dx1 =
    let v1 = pow(~1.0)(pow(0.5)((x dot x)))
    in ((((~1.0 * pow(~2.0)(pow(0.5)((x dot x)))) * ((0.5 * pow(~0.5)((x dot x))) * ((dx1 dot x) + (x dot dx1)))) . x) + (v1 . dx1))


Trying example: nrm
  nrm = (((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup)
  Differentiating:
  f (x1,x2,x3) =
    let v2 = pow(~1.0)(pow(0.5)(((x1,x2,x3) dot (x1,x2,x3))))
    in (v2 . (x1,x2,x3))
  f' (x1,x2,x3) =
    let v2 = pow(~1.0)(pow(0.5)(((x1,x2,x3) dot (x1,x2,x3))))
    in (+) :o: ((. (x1,x2,x3)) :+: (v2 .)) :o: (((~1.0 * pow(~2.0)(pow(0.5)(((x1,x2,x3) dot (x1,x2,x3))))) *) :o: ((0.5 * pow(~0.5)(((x1,x2,x3) dot (x1,x2,x3)))) *) :o: (+) :o: ((dot (x1,x2,x3)) :+: ((x1,x2,x3) dot)) :o: dup :+: id) :o: dup
  f' (x1,x2,x3) (dx1,dx2,dx3) =
    let v2 = pow(~1.0)(pow(0.5)(((x1,x2,x3) dot (x1,x2,x3))))
    in ((((~1.0 * pow(~2.0)(pow(0.5)(((x1,x2,x3) dot (x1,x2,x3))))) * ((0.5 * pow(~0.5)(((x1,x2,x3) dot (x1,x2,x3)))) * (((dx1,dx2,dx3) dot (x1,x2,x3)) + ((x1,x2,x3) dot (dx1,dx2,dx3))))) . (x1,x2,x3)) + (v2 . (dx1,dx2,dx3)))


Trying example: nrm
  nrm = (((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup)
  Differentiating:
  f (2.0,3.0,5.0) =
    (0.324442842262,0.486664263392,0.811107105654)
  f' (2.0,3.0,5.0) =
    (+) :o: ((. (2.0,3.0,5.0)) :+: (0.162221421131 .)) :o: ((~0.0263157894737 *) :o: (0.0811107105654 *) :o: (+) :o: ((dot (2.0,3.0,5.0)) :+: ((2.0,3.0,5.0) dot)) :o: dup :+: id) :o: dup
  f' (2.0,3.0,5.0) (1.0,0.0,0.0) =
    (0.145145482064,~0.0256139085996,~0.042689847666)


Trying example: rodriguez
  rodriguez = (((+) o ((((+) o ((((.) o (((cos o ((pow(0.5) o (dot)) o dup)) o pi_1/2) x pi_2/2)) o dup) x (((.) o (((sin o ((pow(0.5) o (dot)) o dup)) o pi_1/2) x (((x) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi_1/2) x pi_2/2)) o dup))) o dup))) o dup) x (((.) o ((((+) o (1.0 x (((~ o cos) o ((pow(0.5) o (dot)) o dup)) o pi_1/2))) o dup) x (((.) o ((((dot) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi_1/2) x ((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi_1/2))) o dup) x pi_2/2)) o dup))) o dup))) o dup)
  Differentiating:
  f (r,X) =
    let v3 = cos(pow(0.5)((r dot r)))
    let v4 = pow(~1.0)(pow(0.5)((r dot r)))
    let v5 = (v4 . r)
    let v6 = sin(pow(0.5)((r dot r)))
    let v7 = (v5 x X)
    let v8 = pow(~1.0)(pow(0.5)((r dot r)))
    let v9 = pow(~1.0)(pow(0.5)((r dot r)))
    let v10 = (v8 . r)
    let v11 = (v9 . r)
    let v12 = (v10 dot v11)
    let v13 = (1.0 + ~(cos(pow(0.5)((r dot r)))))
    let v14 = (v12 . X)
    in (((v3 . X) + (v6 . v7)) + (v13 . v14))
  f' (r,X) =
    let v3 = cos(pow(0.5)((r dot r)))
    let v4 = pow(~1.0)(pow(0.5)((r dot r)))
    let v5 = (v4 . r)
    let v6 = sin(pow(0.5)((r dot r)))
    let v7 = (v5 x X)
    let v8 = pow(~1.0)(pow(0.5)((r dot r)))
    let v9 = pow(~1.0)(pow(0.5)((r dot r)))
    let v10 = (v8 . r)
    let v11 = (v9 . r)
    let v12 = (v10 dot v11)
    let v13 = (1.0 + ~(cos(pow(0.5)((r dot r)))))
    let v14 = (v12 . X)
    in (+) :o: ((+) :o: ((+) :o: ((. X) :+: (v3 .)) :o: ((~(sin(pow(0.5)((r dot r)))) *) :o: ((0.5 * pow(~0.5)((r dot r))) *) :o: (+) :o: ((dot r) :+: (r dot)) :o: dup :o: pi_1/2 :+: pi_2/2) :o: dup :+: (+) :o: ((. v7) :+: (v6 .)) :o: ((cos(pow(0.5)((r dot r))) *) :o: ((0.5 * pow(~0.5)((r dot r))) *) :o: (+) :o: ((dot r) :+: (r dot)) :o: dup :o: pi_1/2 :+: (+) :o: ((x X) :+: (v5 x)) :o: ((+) :o: ((. r) :+: (v4 .)) :o: (((~1.0 * pow(~2.0)(pow(0.5)((r dot r)))) *) :o: ((0.5 * pow(~0.5)((r dot r))) *) :o: (+) :o: ((dot r) :+: (r dot)) :o: dup :+: id) :o: dup :o: pi_1/2 :+: pi_2/2) :o: dup) :o: dup) :o: dup :+: (+) :o: ((. v14) :+: (v13 .)) :o: ((+) :o: (zero :+: neg :o: (~(sin(pow(0.5)((r dot r)))) *) :o: ((0.5 * pow(~0.5)((r dot r))) *) :o: (+) :o: ((dot r) :+: (r dot)) :o: dup :o: pi_1/2) :o: dup :+: (+) :o: ((. X) :+: (v12 .)) :o: ((+) :o: ((dot v11) :+: (v10 dot)) :o: ((+) :o: ((. r) :+: (v8 .)) :o: (((~1.0 * pow(~2.0)(pow(0.5)((r dot r)))) *) :o: ((0.5 * pow(~0.5)((r dot r))) *) :o: (+) :o: ((dot r) :+: (r dot)) :o: dup :+: id) :o: dup :o: pi_1/2 :+: (+) :o: ((. r) :+: (v9 .)) :o: (((~1.0 * pow(~2.0)(pow(0.5)((r dot r)))) *) :o: ((0.5 * pow(~0.5)((r dot r))) *) :o: (+) :o: ((dot r) :+: (r dot)) :o: dup :+: id) :o: dup :o: pi_1/2) :o: dup :+: pi_2/2) :o: dup) :o: dup) :o: dup
  f' (r,X) (dr,dX) =
    let v3 = cos(pow(0.5)((r dot r)))
    let v4 = pow(~1.0)(pow(0.5)((r dot r)))
    let v5 = (v4 . r)
    let v6 = sin(pow(0.5)((r dot r)))
    let v7 = (v5 x X)
    let v12 = (v5 dot v5)
    let v13 = (1.0 + ~(cos(pow(0.5)((r dot r)))))
    let v14 = (v12 . X)
    in (((((~(sin(pow(0.5)((r dot r)))) * ((0.5 * pow(~0.5)((r dot r))) * ((dr dot r) + (r dot dr)))) . X) + (v3 . dX)) + (((cos(pow(0.5)((r dot r))) * ((0.5 * pow(~0.5)((r dot r))) * ((dr dot r) + (r dot dr)))) . v7) + (v6 . ((((((~1.0 * pow(~2.0)(pow(0.5)((r dot r)))) * ((0.5 * pow(~0.5)((r dot r))) * ((dr dot r) + (r dot dr)))) . r) + (v4 . dr)) x X) + (v5 x dX))))) + ((~((~(sin(pow(0.5)((r dot r)))) * ((0.5 * pow(~0.5)((r dot r))) * ((dr dot r) + (r dot dr))))) . v14) + (v13 . ((((((((~1.0 * pow(~2.0)(pow(0.5)((r dot r)))) * ((0.5 * pow(~0.5)((r dot r))) * ((dr dot r) + (r dot dr)))) . r) + (v4 . dr)) dot v5) + (v5 dot ((((~1.0 * pow(~2.0)(pow(0.5)((r dot r)))) * ((0.5 * pow(~0.5)((r dot r))) * ((dr dot r) + (r dot dr)))) . r) + (v4 . dr)))) . X) + (v12 . dX)))))


Trying example: rodriguez
  rodriguez = (((+) o ((((+) o ((((.) o (((cos o ((pow(0.5) o (dot)) o dup)) o pi_1/2) x pi_2/2)) o dup) x (((.) o (((sin o ((pow(0.5) o (dot)) o dup)) o pi_1/2) x (((x) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi_1/2) x pi_2/2)) o dup))) o dup))) o dup) x (((.) o ((((+) o (1.0 x (((~ o cos) o ((pow(0.5) o (dot)) o dup)) o pi_1/2))) o dup) x (((.) o ((((dot) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi_1/2) x ((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi_1/2))) o dup) x pi_2/2)) o dup))) o dup))) o dup)
  Differentiating:
  f ((1.0,2.6,3.0),(10.0,20.6,30.0)) =
    (6.77592861229,20.6,31.0746904626)
  f' ((1.0,2.6,3.0),(10.0,20.6,30.0)) =
    (+) :o: ((+) :o: ((+) :o: ((. (10.0,20.6,30.0)) :+: (~0.579806423929 .)) :o: ((0.81475426404 *) :o: (0.122132992187 *) :o: (+) :o: ((dot (1.0,2.6,3.0)) :+: ((1.0,2.6,3.0) dot)) :o: dup :o: pi_1/2 :+: pi_2/2) :o: dup :+: (+) :o: ((. (3.95710894684,8.881784197E~16,~1.31903631561)) :+: (~0.81475426404 .)) :o: ((~0.579806423929 *) :o: (0.122132992187 *) :o: (+) :o: ((dot (1.0,2.6,3.0)) :+: ((1.0,2.6,3.0) dot)) :o: dup :o: pi_1/2 :+: (+) :o: ((x (10.0,20.6,30.0)) :+: ((0.244265984373,0.63509155937,0.732797953119) x)) :o: ((+) :o: ((. (1.0,2.6,3.0)) :+: (0.244265984373 .)) :o: ((~0.0596658711217 *) :o: (0.122132992187 *) :o: (+) :o: ((dot (1.0,2.6,3.0)) :+: ((1.0,2.6,3.0) dot)) :o: dup :+: id) :o: dup :o: pi_1/2 :+: pi_2/2) :o: dup) :o: dup) :o: dup :+: (+) :o: ((. (10.0,20.6,30.0)) :+: (1.57980642393 .)) :o: ((+) :o: (zero :+: neg :o: (0.81475426404 *) :o: (0.122132992187 *) :o: (+) :o: ((dot (1.0,2.6,3.0)) :+: ((1.0,2.6,3.0) dot)) :o: dup :o: pi_1/2) :o: dup :+: (+) :o: ((. (10.0,20.6,30.0)) :+: (1.0 .)) :o: ((+) :o: ((dot (0.244265984373,0.63509155937,0.732797953119)) :+: ((0.244265984373,0.63509155937,0.732797953119) dot)) :o: ((+) :o: ((. (1.0,2.6,3.0)) :+: (0.244265984373 .)) :o: ((~0.0596658711217 *) :o: (0.122132992187 *) :o: (+) :o: ((dot (1.0,2.6,3.0)) :+: ((1.0,2.6,3.0) dot)) :o: dup :+: id) :o: dup :o: pi_1/2 :+: (+) :o: ((. (1.0,2.6,3.0)) :+: (0.244265984373 .)) :o: ((~0.0596658711217 *) :o: (0.122132992187 *) :o: (+) :o: ((dot (1.0,2.6,3.0)) :+: ((1.0,2.6,3.0) dot)) :o: dup :+: id) :o: dup :o: pi_1/2) :o: dup :+: pi_2/2) :o: dup) :o: dup) :o: dup
  f' ((1.0,2.6,3.0),(10.0,20.6,30.0)) ((1.0,2.6,3.0),(10.0,20.6,30.0)) =
    (~2.61693545536,20.6,34.2056451518)


Trying example: p2e
  p2e = (((.) o ((pow(~1.0) o pi_3/3) x ((pi_1/3 x pi_2/3) o dup))) o dup)
  Differentiating:
  f (6.0,12.0,3.0) =
    (2.0,4.0)
  f' (6.0,12.0,3.0) =
    (+) :o: ((. (6.0,12.0)) :+: (0.333333333333 .)) :o: ((~0.111111111111 *) :o: pi_3/3 :+: (pi_1/3 :+: pi_2/3) :o: dup) :o: dup
  f' (6.0,12.0,3.0) (1.0,0.0,0.0) =
    (0.333333333333,0.0)


Trying example: distort
  distort = (((.) o ((((+) o ((((.) o ((((+) o (1.0 x ((norm2sq) o pi_2/2))) o dup) x (pi_1/2 o pi_1/2))) o dup) x (((.) o (((pow(2.0) o (norm2sq)) o pi_2/2) x (pi_2/2 o pi_1/2))) o dup))) o dup) x pi_1/2)) o dup)
  Differentiating:
  f ((2.0,3.0),(8.0,9.0)) =
    (126734.0,190101.0)
  f' ((2.0,3.0),(8.0,9.0)) =
    (+) :o: ((. (2.0,3.0)) :+: (63367.0 .)) :o: ((+) :o: ((+) :o: ((. 2.0) :+: (146.0 .)) :o: ((+) :o: (zero :+: (+) :o: ((norm2sq 9.0) :+: (8.0 norm2sq)) :o: pi_2/2) :o: dup :+: pi_1/2 :o: pi_1/2) :o: dup :+: (+) :o: ((. 3.0) :+: (21025.0 .)) :o: ((290.0 *) :o: (+) :o: ((norm2sq 9.0) :+: (8.0 norm2sq)) :o: pi_2/2 :+: pi_2/2 :o: pi_1/2) :o: dup) :o: dup :+: pi_1/2) :o: dup
  f' ((2.0,3.0),(8.0,9.0)) ((2.0,3.0),(8.0,9.0)) =
    (759228.0,1138842.0)


Trying example: project
  project = (((+) o ((((.) o (pi_3/6 x ((((.) o ((((+) o ((((.) o ((((+) o (1.0 x ((norm2sq) o pi_2/2))) o dup) x (pi_1/2 o pi_1/2))) o dup) x (((.) o (((pow(2.0) o (norm2sq)) o pi_2/2) x (pi_2/2 o pi_1/2))) o dup))) o dup) x pi_1/2)) o dup) o ((pi_5/6 x (((((.) o ((pow(~1.0) o pi_3/3) x ((pi_1/3 x pi_2/3) o dup))) o dup) o (((+) o ((((+) o ((((.) o (((cos o ((pow(0.5) o (dot)) o dup)) o pi_1/2) x pi_2/2)) o dup) x (((.) o (((sin o ((pow(0.5) o (dot)) o dup)) o pi_1/2) x (((x) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi_1/2) x pi_2/2)) o dup))) o dup))) o dup) x (((.) o ((((+) o (1.0 x (((~ o cos) o ((pow(0.5) o (dot)) o dup)) o pi_1/2))) o dup) x (((.) o ((((dot) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi_1/2) x ((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi_1/2))) o dup) x pi_2/2)) o dup))) o dup))) o dup)) o ((pi_1/6 x (((+) o (pi_6/6 x (~ o pi_2/6))) o dup)) o dup))) o dup)))) o dup) x pi_4/6)) o dup)
  Differentiating:
  f ((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0)) =
    (833.308119989,1250.46217998)
  f' ((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0)) =
    (+) :o: ((+) :o: ((. (277.436039996,416.154059994)) :+: (3.0 .)) :o: (pi_3/6 :+: (+) :o: ((. (2.0,3.0)) :+: (138.718019998 .)) :o: ((+) :o: ((+) :o: ((. 2.0) :+: (7.42564472876 .)) :o: ((+) :o: (zero :+: (+) :o: ((norm2sq ~2.53373025161) :+: (~0.0765228124519 norm2sq)) :o: pi_2/2) :o: dup :+: pi_1/2 :o: pi_1/2) :o: dup :+: (+) :o: ((. 3.0) :+: (41.2889101802 .)) :o: ((12.8512894575 *) :o: (+) :o: ((norm2sq ~2.53373025161) :+: (~0.0765228124519 norm2sq)) :o: pi_2/2 :+: pi_2/2 :o: pi_1/2) :o: dup) :o: dup :+: pi_1/2) :o: dup :o: (pi_5/6 :+: (+) :o: ((. (0.311367534261,10.309622917)) :+: (~0.245763620262 .)) :o: ((~0.0603997570441 *) :o: pi_3/3 :+: (pi_1/3 :+: pi_2/3) :o: dup) :o: dup :o: (+) :o: ((+) :o: ((+) :o: ((. (5.0,7.0,~4.0)) :+: (~0.796196607572 .)) :o: ((~0.605037984006 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :o: pi_1/2 :+: pi_2/2) :o: dup :+: (+) :o: ((. (~7.74931919926,5.47010767006,~0.11396057646)) :+: (0.605037984006 .)) :o: ((~0.796196607572 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :o: pi_1/2 :+: (+) :o: ((x (5.0,7.0,~4.0)) :+: ((0.227921152919,0.341881729379,0.911684611677) x)) :o: ((+) :o: ((. (2.0,3.0,8.0)) :+: (0.11396057646 .)) :o: ((~0.012987012987 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :+: id) :o: dup :o: pi_1/2 :+: pi_2/2) :o: dup) :o: dup) :o: dup :+: (+) :o: ((. (5.0,7.0,~4.0)) :+: (1.79619660757 .)) :o: ((+) :o: (zero :+: neg :o: (~0.605037984006 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :o: pi_1/2) :o: dup :+: (+) :o: ((. (5.0,7.0,~4.0)) :+: (1.0 .)) :o: ((+) :o: ((dot (0.227921152919,0.341881729379,0.911684611677)) :+: ((0.227921152919,0.341881729379,0.911684611677) dot)) :o: ((+) :o: ((. (2.0,3.0,8.0)) :+: (0.11396057646 .)) :o: ((~0.012987012987 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :+: id) :o: dup :o: pi_1/2 :+: (+) :o: ((. (2.0,3.0,8.0)) :+: (0.11396057646 .)) :o: ((~0.012987012987 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :+: id) :o: dup :o: pi_1/2) :o: dup :+: pi_2/2) :o: dup) :o: dup) :o: dup :o: (pi_1/6 :+: (+) :o: (pi_6/6 :+: neg :o: pi_2/6) :o: dup) :o: dup) :o: dup) :o: dup :+: pi_4/6) :o: dup
  f' ((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0)) ((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0)) =
    (66497.7862738,99747.1794107)


Trying example: residual
  residual = (((((.) o (pi_1/3 x (((+) o (pi_2/3 x ((~ o (((+) o ((((.) o (pi_3/6 x ((((.) o ((((+) o ((((.) o ((((+) o (1.0 x ((norm2sq) o pi_2/2))) o dup) x (pi_1/2 o pi_1/2))) o dup) x (((.) o (((pow(2.0) o (norm2sq)) o pi_2/2) x (pi_2/2 o pi_1/2))) o dup))) o dup) x pi_1/2)) o dup) o ((pi_5/6 x (((((.) o ((pow(~1.0) o pi_3/3) x ((pi_1/3 x pi_2/3) o dup))) o dup) o (((+) o ((((+) o ((((.) o (((cos o ((pow(0.5) o (dot)) o dup)) o pi_1/2) x pi_2/2)) o dup) x (((.) o (((sin o ((pow(0.5) o (dot)) o dup)) o pi_1/2) x (((x) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi_1/2) x pi_2/2)) o dup))) o dup))) o dup) x (((.) o ((((+) o (1.0 x (((~ o cos) o ((pow(0.5) o (dot)) o dup)) o pi_1/2))) o dup) x (((.) o ((((dot) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi_1/2) x ((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi_1/2))) o dup) x pi_2/2)) o dup))) o dup))) o dup)) o ((pi_1/6 x (((+) o (pi_6/6 x (~ o pi_2/6))) o dup)) o dup))) o dup)))) o dup) x pi_4/6)) o dup)) o pi_3/3))) o dup))) o dup) x (((+) o (1.0 x ((~ o pow(2.0)) o pi_1/3))) o dup)) o dup)
  Differentiating:
  f (1.2,(1.0,2.0),((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0))) =
    ((~998.769743986,~1498.15461598),~0.44)
  f' (1.2,(1.0,2.0),((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0))) =
    ((+) :o: ((. (~832.308119989,~1248.46217998)) :+: (1.2 .)) :o: (pi_1/3 :+: (+) :o: (pi_2/3 :+: neg :o: (+) :o: ((+) :o: ((. (277.436039996,416.154059994)) :+: (3.0 .)) :o: (pi_3/6 :+: (+) :o: ((. (2.0,3.0)) :+: (138.718019998 .)) :o: ((+) :o: ((+) :o: ((. 2.0) :+: (7.42564472876 .)) :o: ((+) :o: (zero :+: (+) :o: ((norm2sq ~2.53373025161) :+: (~0.0765228124519 norm2sq)) :o: pi_2/2) :o: dup :+: pi_1/2 :o: pi_1/2) :o: dup :+: (+) :o: ((. 3.0) :+: (41.2889101802 .)) :o: ((12.8512894575 *) :o: (+) :o: ((norm2sq ~2.53373025161) :+: (~0.0765228124519 norm2sq)) :o: pi_2/2 :+: pi_2/2 :o: pi_1/2) :o: dup) :o: dup :+: pi_1/2) :o: dup :o: (pi_5/6 :+: (+) :o: ((. (0.311367534261,10.309622917)) :+: (~0.245763620262 .)) :o: ((~0.0603997570441 *) :o: pi_3/3 :+: (pi_1/3 :+: pi_2/3) :o: dup) :o: dup :o: (+) :o: ((+) :o: ((+) :o: ((. (5.0,7.0,~4.0)) :+: (~0.796196607572 .)) :o: ((~0.605037984006 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :o: pi_1/2 :+: pi_2/2) :o: dup :+: (+) :o: ((. (~7.74931919926,5.47010767006,~0.11396057646)) :+: (0.605037984006 .)) :o: ((~0.796196607572 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :o: pi_1/2 :+: (+) :o: ((x (5.0,7.0,~4.0)) :+: ((0.227921152919,0.341881729379,0.911684611677) x)) :o: ((+) :o: ((. (2.0,3.0,8.0)) :+: (0.11396057646 .)) :o: ((~0.012987012987 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :+: id) :o: dup :o: pi_1/2 :+: pi_2/2) :o: dup) :o: dup) :o: dup :+: (+) :o: ((. (5.0,7.0,~4.0)) :+: (1.79619660757 .)) :o: ((+) :o: (zero :+: neg :o: (~0.605037984006 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :o: pi_1/2) :o: dup :+: (+) :o: ((. (5.0,7.0,~4.0)) :+: (1.0 .)) :o: ((+) :o: ((dot (0.227921152919,0.341881729379,0.911684611677)) :+: ((0.227921152919,0.341881729379,0.911684611677) dot)) :o: ((+) :o: ((. (2.0,3.0,8.0)) :+: (0.11396057646 .)) :o: ((~0.012987012987 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :+: id) :o: dup :o: pi_1/2 :+: (+) :o: ((. (2.0,3.0,8.0)) :+: (0.11396057646 .)) :o: ((~0.012987012987 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :+: id) :o: dup :o: pi_1/2) :o: dup :+: pi_2/2) :o: dup) :o: dup) :o: dup :o: (pi_1/6 :+: (+) :o: (pi_6/6 :+: neg :o: pi_2/6) :o: dup) :o: dup) :o: dup) :o: dup :+: pi_4/6) :o: dup :o: pi_3/3) :o: dup) :o: dup :+: (+) :o: (zero :+: neg :o: (2.4 *) :o: pi_1/3) :o: dup) :o: dup
  f' (1.2,(1.0,2.0),((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0))) (0.2,(0.3,1.0),((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0))) =
    ((~79963.4451526,~119945.107729),~0.48)

