****
**** BA (Bundle Adjustment)
****

Trying example: norm
  norm = ((pow(0.5) o (dot)) o dup)
  norm x = pow(0.5)((x dot x))
  norm' x = ((0.5 * pow(~0.5)((x dot x))) *) :o: (+) :o: ((dot x) :+: (x dot)) :o: dup
Now evaluating
Now simplifying
  norm' x dx1 =
    let v1 = (dx1 dot x)
    let v2 = (x dot dx1)
    let v3 = (v1 + v2)
    let v4 = ((0.5 * pow(~0.5)((x dot x))) * v3)
    in v4

Trying example: norm
  norm = ((pow(0.5) o (dot)) o dup)
  norm (3.0,4.0) = 5.0
  norm' (3.0,4.0) = (0.1 *) :o: (+) :o: ((dot (3.0,4.0)) :+: ((3.0,4.0) dot)) :o: dup
Now evaluating
Now simplifying
  norm' (3.0,4.0) (1.0,0.0) =
    0.6

Trying example: nrm
  nrm = (((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup)
  nrm x = (pow(~1.0)(pow(0.5)((x dot x))) . x)
  nrm' x = (+) :o: ((. x) :+: (pow(~1.0)(pow(0.5)((x dot x))) .)) :o: (((~1.0 * pow(~2.0)(pow(0.5)((x dot x)))) *) :o: ((0.5 * pow(~0.5)((x dot x))) *) :o: (+) :o: ((dot x) :+: (x dot)) :o: dup :+: id) :o: dup
Now evaluating
Now simplifying
  nrm' x dx1 =
    let v5 = (dx1 dot x)
    let v6 = (x dot dx1)
    let v7 = (v5 + v6)
    let v8 = ((0.5 * pow(~0.5)((x dot x))) * v7)
    let v9 = ((~1.0 * pow(~2.0)(pow(0.5)((x dot x)))) * v8)
    let v10 = (v9 . x)
    let v11 = (pow(~1.0)(pow(0.5)((x dot x))) . dx1)
    let v12 = (v10 + v11)
    in v12

Trying example: nrm
  nrm = (((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup)
  nrm (x1,x2,x3) = (pow(~1.0)(pow(0.5)(((x1,x2,x3) dot (x1,x2,x3)))) . (x1,x2,x3))
  nrm' (x1,x2,x3) = (+) :o: ((. (x1,x2,x3)) :+: (pow(~1.0)(pow(0.5)(((x1,x2,x3) dot (x1,x2,x3)))) .)) :o: (((~1.0 * pow(~2.0)(pow(0.5)(((x1,x2,x3) dot (x1,x2,x3))))) *) :o: ((0.5 * pow(~0.5)(((x1,x2,x3) dot (x1,x2,x3)))) *) :o: (+) :o: ((dot (x1,x2,x3)) :+: ((x1,x2,x3) dot)) :o: dup :+: id) :o: dup
Now evaluating
Now simplifying
  nrm' (x1,x2,x3) (dx1,dx2,dx3) =
    let v13 = ((dx1,dx2,dx3) dot (x1,x2,x3))
    let v14 = ((x1,x2,x3) dot (dx1,dx2,dx3))
    let v15 = (v13 + v14)
    let v16 = ((0.5 * pow(~0.5)(((x1,x2,x3) dot (x1,x2,x3)))) * v15)
    let v17 = ((~1.0 * pow(~2.0)(pow(0.5)(((x1,x2,x3) dot (x1,x2,x3))))) * v16)
    let v18 = (v17 . (x1,x2,x3))
    let v19 = (pow(~1.0)(pow(0.5)(((x1,x2,x3) dot (x1,x2,x3)))) . (dx1,dx2,dx3))
    let v20 = (v18 + v19)
    in v20

Trying example: nrm
  nrm = (((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup)
  nrm (2.0,3.0,5.0) = (0.324442842262,0.486664263392,0.811107105654)
  nrm' (2.0,3.0,5.0) = (+) :o: ((. (2.0,3.0,5.0)) :+: (0.162221421131 .)) :o: ((~0.0263157894737 *) :o: (0.0811107105654 *) :o: (+) :o: ((dot (2.0,3.0,5.0)) :+: ((2.0,3.0,5.0) dot)) :o: dup :+: id) :o: dup
Now evaluating
Now simplifying
  nrm' (2.0,3.0,5.0) (1.0,0.0,0.0) =
    (0.145145482064,~0.0256139085996,~0.042689847666)

Trying example: rodriguez
  rodriguez = (((+) o ((((+) o ((((.) o (((cos o ((pow(0.5) o (dot)) o dup)) o pi1) x pi2)) o dup) x (((.) o (((sin o ((pow(0.5) o (dot)) o dup)) o pi1) x (((x) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi1) x pi2)) o dup))) o dup))) o dup) x (((.) o ((((+) o (1.0 x (((~ o cos) o ((pow(0.5) o (dot)) o dup)) o pi1))) o dup) x (((.) o ((((dot) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi1) x ((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi1))) o dup) x pi2)) o dup))) o dup))) o dup)
  rodriguez (r,X) = (((cos(pow(0.5)((r dot r))) . X) + (sin(pow(0.5)((r dot r))) . ((pow(~1.0)(pow(0.5)((r dot r))) . r) x X))) + ((1.0 + ~(cos(pow(0.5)((r dot r))))) . (((pow(~1.0)(pow(0.5)((r dot r))) . r) dot (pow(~1.0)(pow(0.5)((r dot r))) . r)) . X)))
  rodriguez' (r,X) = (+) :o: ((+) :o: ((+) :o: ((. X) :+: (cos(pow(0.5)((r dot r))) .)) :o: ((~(sin(pow(0.5)((r dot r)))) *) :o: ((0.5 * pow(~0.5)((r dot r))) *) :o: (+) :o: ((dot r) :+: (r dot)) :o: dup :o: pi1 :+: pi2) :o: dup :+: (+) :o: ((. ((pow(~1.0)(pow(0.5)((r dot r))) . r) x X)) :+: (sin(pow(0.5)((r dot r))) .)) :o: ((cos(pow(0.5)((r dot r))) *) :o: ((0.5 * pow(~0.5)((r dot r))) *) :o: (+) :o: ((dot r) :+: (r dot)) :o: dup :o: pi1 :+: (+) :o: ((x X) :+: ((pow(~1.0)(pow(0.5)((r dot r))) . r) x)) :o: ((+) :o: ((. r) :+: (pow(~1.0)(pow(0.5)((r dot r))) .)) :o: (((~1.0 * pow(~2.0)(pow(0.5)((r dot r)))) *) :o: ((0.5 * pow(~0.5)((r dot r))) *) :o: (+) :o: ((dot r) :+: (r dot)) :o: dup :+: id) :o: dup :o: pi1 :+: pi2) :o: dup) :o: dup) :o: dup :+: (+) :o: ((. (((pow(~1.0)(pow(0.5)((r dot r))) . r) dot (pow(~1.0)(pow(0.5)((r dot r))) . r)) . X)) :+: ((1.0 + ~(cos(pow(0.5)((r dot r))))) .)) :o: ((+) :o: (zero :+: neg :o: (~(sin(pow(0.5)((r dot r)))) *) :o: ((0.5 * pow(~0.5)((r dot r))) *) :o: (+) :o: ((dot r) :+: (r dot)) :o: dup :o: pi1) :o: dup :+: (+) :o: ((. X) :+: (((pow(~1.0)(pow(0.5)((r dot r))) . r) dot (pow(~1.0)(pow(0.5)((r dot r))) . r)) .)) :o: ((+) :o: ((dot (pow(~1.0)(pow(0.5)((r dot r))) . r)) :+: ((pow(~1.0)(pow(0.5)((r dot r))) . r) dot)) :o: ((+) :o: ((. r) :+: (pow(~1.0)(pow(0.5)((r dot r))) .)) :o: (((~1.0 * pow(~2.0)(pow(0.5)((r dot r)))) *) :o: ((0.5 * pow(~0.5)((r dot r))) *) :o: (+) :o: ((dot r) :+: (r dot)) :o: dup :+: id) :o: dup :o: pi1 :+: (+) :o: ((. r) :+: (pow(~1.0)(pow(0.5)((r dot r))) .)) :o: (((~1.0 * pow(~2.0)(pow(0.5)((r dot r)))) *) :o: ((0.5 * pow(~0.5)((r dot r))) *) :o: (+) :o: ((dot r) :+: (r dot)) :o: dup :+: id) :o: dup :o: pi1) :o: dup :+: pi2) :o: dup) :o: dup) :o: dup
Now evaluating
Now simplifying
  rodriguez' (r,X) (dr,dX) =
    let v21 = (dr dot r)
    let v22 = (r dot dr)
    let v23 = (v21 + v22)
    let v24 = ((0.5 * pow(~0.5)((r dot r))) * v23)
    let v25 = (~(sin(pow(0.5)((r dot r)))) * v24)
    let v26 = (v25 . X)
    let v27 = (cos(pow(0.5)((r dot r))) . dX)
    let v28 = (v26 + v27)
    let v33 = (cos(pow(0.5)((r dot r))) * v24)
    let v38 = ((~1.0 * pow(~2.0)(pow(0.5)((r dot r)))) * v24)
    let v39 = (v38 . r)
    let v40 = (pow(~1.0)(pow(0.5)((r dot r))) . dr)
    let v41 = (v39 + v40)
    let v42 = (v41 x X)
    let v43 = ((pow(~1.0)(pow(0.5)((r dot r))) . r) x dX)
    let v44 = (v42 + v43)
    let v45 = (v33 . ((pow(~1.0)(pow(0.5)((r dot r))) . r) x X))
    let v46 = (sin(pow(0.5)((r dot r))) . v44)
    let v47 = (v45 + v46)
    let v48 = (v28 + v47)
    let v54 = ~(v25)
    let v72 = (v41 dot (pow(~1.0)(pow(0.5)((r dot r))) . r))
    let v73 = ((pow(~1.0)(pow(0.5)((r dot r))) . r) dot v41)
    let v74 = (v72 + v73)
    let v75 = (v74 . X)
    let v76 = (((pow(~1.0)(pow(0.5)((r dot r))) . r) dot (pow(~1.0)(pow(0.5)((r dot r))) . r)) . dX)
    let v77 = (v75 + v76)
    let v78 = (v54 . (((pow(~1.0)(pow(0.5)((r dot r))) . r) dot (pow(~1.0)(pow(0.5)((r dot r))) . r)) . X))
    let v79 = ((1.0 + ~(cos(pow(0.5)((r dot r))))) . v77)
    let v80 = (v78 + v79)
    let v81 = (v48 + v80)
    in v81

Trying example: rodriguez
  rodriguez = (((+) o ((((+) o ((((.) o (((cos o ((pow(0.5) o (dot)) o dup)) o pi1) x pi2)) o dup) x (((.) o (((sin o ((pow(0.5) o (dot)) o dup)) o pi1) x (((x) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi1) x pi2)) o dup))) o dup))) o dup) x (((.) o ((((+) o (1.0 x (((~ o cos) o ((pow(0.5) o (dot)) o dup)) o pi1))) o dup) x (((.) o ((((dot) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi1) x ((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi1))) o dup) x pi2)) o dup))) o dup))) o dup)
  rodriguez ((1.0,2.6,3.0),(10.0,20.6,30.0)) = (6.77592861229,20.6,31.0746904626)
  rodriguez' ((1.0,2.6,3.0),(10.0,20.6,30.0)) = (+) :o: ((+) :o: ((+) :o: ((. (10.0,20.6,30.0)) :+: (~0.579806423929 .)) :o: ((0.81475426404 *) :o: (0.122132992187 *) :o: (+) :o: ((dot (1.0,2.6,3.0)) :+: ((1.0,2.6,3.0) dot)) :o: dup :o: pi1 :+: pi2) :o: dup :+: (+) :o: ((. (3.95710894684,8.881784197E~16,~1.31903631561)) :+: (~0.81475426404 .)) :o: ((~0.579806423929 *) :o: (0.122132992187 *) :o: (+) :o: ((dot (1.0,2.6,3.0)) :+: ((1.0,2.6,3.0) dot)) :o: dup :o: pi1 :+: (+) :o: ((x (10.0,20.6,30.0)) :+: ((0.244265984373,0.63509155937,0.732797953119) x)) :o: ((+) :o: ((. (1.0,2.6,3.0)) :+: (0.244265984373 .)) :o: ((~0.0596658711217 *) :o: (0.122132992187 *) :o: (+) :o: ((dot (1.0,2.6,3.0)) :+: ((1.0,2.6,3.0) dot)) :o: dup :+: id) :o: dup :o: pi1 :+: pi2) :o: dup) :o: dup) :o: dup :+: (+) :o: ((. (10.0,20.6,30.0)) :+: (1.57980642393 .)) :o: ((+) :o: (zero :+: neg :o: (0.81475426404 *) :o: (0.122132992187 *) :o: (+) :o: ((dot (1.0,2.6,3.0)) :+: ((1.0,2.6,3.0) dot)) :o: dup :o: pi1) :o: dup :+: (+) :o: ((. (10.0,20.6,30.0)) :+: (1.0 .)) :o: ((+) :o: ((dot (0.244265984373,0.63509155937,0.732797953119)) :+: ((0.244265984373,0.63509155937,0.732797953119) dot)) :o: ((+) :o: ((. (1.0,2.6,3.0)) :+: (0.244265984373 .)) :o: ((~0.0596658711217 *) :o: (0.122132992187 *) :o: (+) :o: ((dot (1.0,2.6,3.0)) :+: ((1.0,2.6,3.0) dot)) :o: dup :+: id) :o: dup :o: pi1 :+: (+) :o: ((. (1.0,2.6,3.0)) :+: (0.244265984373 .)) :o: ((~0.0596658711217 *) :o: (0.122132992187 *) :o: (+) :o: ((dot (1.0,2.6,3.0)) :+: ((1.0,2.6,3.0) dot)) :o: dup :+: id) :o: dup :o: pi1) :o: dup :+: pi2) :o: dup) :o: dup) :o: dup
Now evaluating
Now simplifying
  rodriguez' ((1.0,2.6,3.0),(10.0,20.6,30.0)) ((1.0,2.6,3.0),(10.0,20.6,30.0)) =
    (~2.61693545536,20.6,34.2056451518)

Trying example: p2e
  p2e = (((.) o ((pow(~1.0) o pi3) x ((pi1 x pi2) o dup))) o dup)
  p2e (6.0,12.0,3.0) = (2.0,4.0)
  p2e' (6.0,12.0,3.0) = (+) :o: ((. (6.0,12.0)) :+: (0.333333333333 .)) :o: ((~0.111111111111 *) :o: pi3 :+: (pi1 :+: pi2) :o: dup) :o: dup
Now evaluating
Now simplifying
  p2e' (6.0,12.0,3.0) (1.0,0.0,0.0) =
    (0.333333333333,0.0)

Trying example: distort
  distort = (((.) o ((((+) o ((((.) o ((((+) o (1.0 x ((norm2sq) o pi2))) o dup) x (pi1 o pi1))) o dup) x (((.) o (((pow(2.0) o (norm2sq)) o pi2) x (pi2 o pi1))) o dup))) o dup) x pi1)) o dup)
  distort ((2.0,3.0),(8.0,9.0)) = (126734.0,190101.0)
  distort' ((2.0,3.0),(8.0,9.0)) = (+) :o: ((. (2.0,3.0)) :+: (63367.0 .)) :o: ((+) :o: ((+) :o: ((. 2.0) :+: (146.0 .)) :o: ((+) :o: (zero :+: (+) :o: ((norm2sq 9.0) :+: (8.0 norm2sq)) :o: pi2) :o: dup :+: pi1 :o: pi1) :o: dup :+: (+) :o: ((. 3.0) :+: (21025.0 .)) :o: ((290.0 *) :o: (+) :o: ((norm2sq 9.0) :+: (8.0 norm2sq)) :o: pi2 :+: pi2 :o: pi1) :o: dup) :o: dup :+: pi1) :o: dup
Now evaluating
Now simplifying
  distort' ((2.0,3.0),(8.0,9.0)) ((2.0,3.0),(8.0,9.0)) =
    (759228.0,1138842.0)

Trying example: project
  project = (((+) o ((((.) o (pi3 x ((((.) o ((((+) o ((((.) o ((((+) o (1.0 x ((norm2sq) o pi2))) o dup) x (pi1 o pi1))) o dup) x (((.) o (((pow(2.0) o (norm2sq)) o pi2) x (pi2 o pi1))) o dup))) o dup) x pi1)) o dup) o ((pi5 x (((((.) o ((pow(~1.0) o pi3) x ((pi1 x pi2) o dup))) o dup) o (((+) o ((((+) o ((((.) o (((cos o ((pow(0.5) o (dot)) o dup)) o pi1) x pi2)) o dup) x (((.) o (((sin o ((pow(0.5) o (dot)) o dup)) o pi1) x (((x) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi1) x pi2)) o dup))) o dup))) o dup) x (((.) o ((((+) o (1.0 x (((~ o cos) o ((pow(0.5) o (dot)) o dup)) o pi1))) o dup) x (((.) o ((((dot) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi1) x ((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi1))) o dup) x pi2)) o dup))) o dup))) o dup)) o ((pi1 x (((+) o (pi6 x (~ o pi2))) o dup)) o dup))) o dup)))) o dup) x pi4)) o dup)
  project ((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0)) = (833.308119989,1250.46217998)
  project' ((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0)) = (+) :o: ((+) :o: ((. (277.436039996,416.154059994)) :+: (3.0 .)) :o: (pi3 :+: (+) :o: ((. (2.0,3.0)) :+: (138.718019998 .)) :o: ((+) :o: ((+) :o: ((. 2.0) :+: (7.42564472876 .)) :o: ((+) :o: (zero :+: (+) :o: ((norm2sq ~2.53373025161) :+: (~0.0765228124519 norm2sq)) :o: pi2) :o: dup :+: pi1 :o: pi1) :o: dup :+: (+) :o: ((. 3.0) :+: (41.2889101802 .)) :o: ((12.8512894575 *) :o: (+) :o: ((norm2sq ~2.53373025161) :+: (~0.0765228124519 norm2sq)) :o: pi2 :+: pi2 :o: pi1) :o: dup) :o: dup :+: pi1) :o: dup :o: (pi5 :+: (+) :o: ((. (0.311367534261,10.309622917)) :+: (~0.245763620262 .)) :o: ((~0.0603997570441 *) :o: pi3 :+: (pi1 :+: pi2) :o: dup) :o: dup :o: (+) :o: ((+) :o: ((+) :o: ((. (5.0,7.0,~4.0)) :+: (~0.796196607572 .)) :o: ((~0.605037984006 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :o: pi1 :+: pi2) :o: dup :+: (+) :o: ((. (~7.74931919926,5.47010767006,~0.11396057646)) :+: (0.605037984006 .)) :o: ((~0.796196607572 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :o: pi1 :+: (+) :o: ((x (5.0,7.0,~4.0)) :+: ((0.227921152919,0.341881729379,0.911684611677) x)) :o: ((+) :o: ((. (2.0,3.0,8.0)) :+: (0.11396057646 .)) :o: ((~0.012987012987 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :+: id) :o: dup :o: pi1 :+: pi2) :o: dup) :o: dup) :o: dup :+: (+) :o: ((. (5.0,7.0,~4.0)) :+: (1.79619660757 .)) :o: ((+) :o: (zero :+: neg :o: (~0.605037984006 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :o: pi1) :o: dup :+: (+) :o: ((. (5.0,7.0,~4.0)) :+: (1.0 .)) :o: ((+) :o: ((dot (0.227921152919,0.341881729379,0.911684611677)) :+: ((0.227921152919,0.341881729379,0.911684611677) dot)) :o: ((+) :o: ((. (2.0,3.0,8.0)) :+: (0.11396057646 .)) :o: ((~0.012987012987 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :+: id) :o: dup :o: pi1 :+: (+) :o: ((. (2.0,3.0,8.0)) :+: (0.11396057646 .)) :o: ((~0.012987012987 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :+: id) :o: dup :o: pi1) :o: dup :+: pi2) :o: dup) :o: dup) :o: dup :o: (pi1 :+: (+) :o: (pi6 :+: neg :o: pi2) :o: dup) :o: dup) :o: dup) :o: dup :+: pi4) :o: dup
Now evaluating
Now simplifying
  project' ((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0)) ((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0)) =
    (66497.7862738,99747.1794107)

Trying example: residual
  residual = (((((.) o (pi1 x (((+) o (pi2 x ((~ o (((+) o ((((.) o (pi3 x ((((.) o ((((+) o ((((.) o ((((+) o (1.0 x ((norm2sq) o pi2))) o dup) x (pi1 o pi1))) o dup) x (((.) o (((pow(2.0) o (norm2sq)) o pi2) x (pi2 o pi1))) o dup))) o dup) x pi1)) o dup) o ((pi5 x (((((.) o ((pow(~1.0) o pi3) x ((pi1 x pi2) o dup))) o dup) o (((+) o ((((+) o ((((.) o (((cos o ((pow(0.5) o (dot)) o dup)) o pi1) x pi2)) o dup) x (((.) o (((sin o ((pow(0.5) o (dot)) o dup)) o pi1) x (((x) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi1) x pi2)) o dup))) o dup))) o dup) x (((.) o ((((+) o (1.0 x (((~ o cos) o ((pow(0.5) o (dot)) o dup)) o pi1))) o dup) x (((.) o ((((dot) o (((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi1) x ((((.) o ((pow(~1.0) o ((pow(0.5) o (dot)) o dup)) x id)) o dup) o pi1))) o dup) x pi2)) o dup))) o dup))) o dup)) o ((pi1 x (((+) o (pi6 x (~ o pi2))) o dup)) o dup))) o dup)))) o dup) x pi4)) o dup)) o pi3))) o dup))) o dup) x (((+) o (1.0 x ((~ o pow(2.0)) o pi1))) o dup)) o dup)
  residual (1.2,(1.0,2.0),((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0))) = ((~998.769743986,~1498.15461598),~0.44)
  residual' (1.2,(1.0,2.0),((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0))) = ((+) :o: ((. (~832.308119989,~1248.46217998)) :+: (1.2 .)) :o: (pi1 :+: (+) :o: (pi2 :+: neg :o: (+) :o: ((+) :o: ((. (277.436039996,416.154059994)) :+: (3.0 .)) :o: (pi3 :+: (+) :o: ((. (2.0,3.0)) :+: (138.718019998 .)) :o: ((+) :o: ((+) :o: ((. 2.0) :+: (7.42564472876 .)) :o: ((+) :o: (zero :+: (+) :o: ((norm2sq ~2.53373025161) :+: (~0.0765228124519 norm2sq)) :o: pi2) :o: dup :+: pi1 :o: pi1) :o: dup :+: (+) :o: ((. 3.0) :+: (41.2889101802 .)) :o: ((12.8512894575 *) :o: (+) :o: ((norm2sq ~2.53373025161) :+: (~0.0765228124519 norm2sq)) :o: pi2 :+: pi2 :o: pi1) :o: dup) :o: dup :+: pi1) :o: dup :o: (pi5 :+: (+) :o: ((. (0.311367534261,10.309622917)) :+: (~0.245763620262 .)) :o: ((~0.0603997570441 *) :o: pi3 :+: (pi1 :+: pi2) :o: dup) :o: dup :o: (+) :o: ((+) :o: ((+) :o: ((. (5.0,7.0,~4.0)) :+: (~0.796196607572 .)) :o: ((~0.605037984006 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :o: pi1 :+: pi2) :o: dup :+: (+) :o: ((. (~7.74931919926,5.47010767006,~0.11396057646)) :+: (0.605037984006 .)) :o: ((~0.796196607572 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :o: pi1 :+: (+) :o: ((x (5.0,7.0,~4.0)) :+: ((0.227921152919,0.341881729379,0.911684611677) x)) :o: ((+) :o: ((. (2.0,3.0,8.0)) :+: (0.11396057646 .)) :o: ((~0.012987012987 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :+: id) :o: dup :o: pi1 :+: pi2) :o: dup) :o: dup) :o: dup :+: (+) :o: ((. (5.0,7.0,~4.0)) :+: (1.79619660757 .)) :o: ((+) :o: (zero :+: neg :o: (~0.605037984006 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :o: pi1) :o: dup :+: (+) :o: ((. (5.0,7.0,~4.0)) :+: (1.0 .)) :o: ((+) :o: ((dot (0.227921152919,0.341881729379,0.911684611677)) :+: ((0.227921152919,0.341881729379,0.911684611677) dot)) :o: ((+) :o: ((. (2.0,3.0,8.0)) :+: (0.11396057646 .)) :o: ((~0.012987012987 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :+: id) :o: dup :o: pi1 :+: (+) :o: ((. (2.0,3.0,8.0)) :+: (0.11396057646 .)) :o: ((~0.012987012987 *) :o: (0.0569802882298 *) :o: (+) :o: ((dot (2.0,3.0,8.0)) :+: ((2.0,3.0,8.0) dot)) :o: dup :+: id) :o: dup :o: pi1) :o: dup :+: pi2) :o: dup) :o: dup) :o: dup :o: (pi1 :+: (+) :o: (pi6 :+: neg :o: pi2) :o: dup) :o: dup) :o: dup) :o: dup :+: pi4) :o: dup :o: pi3) :o: dup) :o: dup :+: (+) :o: (zero :+: neg :o: (2.4 *) :o: pi1) :o: dup) :o: dup
Now evaluating
Now simplifying
  residual' (1.2,(1.0,2.0),((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0))) (0.2,(0.3,1.0),((2.0,3.0,8.0),(1.0,2.0,6.0),3.0,(1.0,2.0),(2.0,3.0),(6.0,9.0,2.0))) =
    ((~79963.4451526,~119945.107729),~0.48)
