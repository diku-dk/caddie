(* norm : R^3 -> R *)
fun norm xs = pow 0.5 (dprod3 (xs,xs))

(* nrm : R^3 -> R^3 *)
fun nrm xs = (pow -1 (norm xs)) * xs

(* rodriguez : R^3 x R^3 -> R^3 *)
fun rodriguez p =
  let r = #1 p
  in let X = #2 p
     in let normr = norm r
        in let nrmr = nrm r
           in (cos normr) * X +
              (sin normr) * cprod3(nrmr,X) +
              (1 - cos normr) * (dprod3(nrmr,nrmr)) * X
           end
        end
     end
  end

(* p2e : R x R x R -> R^2 *)
fun p2e p =
  let f = pow -1 (#3 p)
  in (f * (#1 p),
      f * (#2 p))
  end


(* distort: R^2 x R^2 -> R^2 x R^2 *)
fun distort p =
  let k = #1 p
  in let X = #2 p
     in let n2 = norm2sq X
        in let f = (1 + n2) * (#1 k) +
                   pow 2 n2 * (#2 k)
           in (f * #1 k,
               f * #2 k)
           end
        end
     end
  end

(* project : R^3 x R^3 x R x R^2 x R^2 x R^3 -> R^2 *)
fun project a =
  let r = #1 a                    (* R^3 *)
  in let C = #2 a                 (* R^3 *)
     in let f = #3 a              (* R   *)
        in let x0 = #4 a          (* R^2 *)
           in let k = #5 a        (* R^2 *)
              in let X = #6 a     (* R^3 *)
                 in let rod = rodriguez (r, X - C)
                    in f * (distort (k, p2e rod))
                       + x0
                    end
                 end
              end
           end
        end
     end
  end


fun f xs = dprod (xs,xs) + 2
